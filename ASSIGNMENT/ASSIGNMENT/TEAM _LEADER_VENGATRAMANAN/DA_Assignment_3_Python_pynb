{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fwU2iooz85jt"
      },
      "source": [
        "## Exercises\n",
        "\n",
        "Answer the questions or complete the tasks outlined in bold below, use the specific method described if applicable."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SzBQQ_ml85j1"
      },
      "source": [
        "** What is 7 to the power of 4?**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "UhvE4PBC85j3",
        "outputId": "4d71e558-da93-4aae-eb6b-5e105f3db3cf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2401"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "7**4"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ds8G9S8j85j6"
      },
      "source": [
        "** Split this string:**\n",
        "\n",
        "    s = \"Hi there Sam!\"\n",
        "    \n",
        "**into a list. **"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "collapsed": true,
        "id": "GD_Tls3H85j7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c6aaebff-c559-4bc9-cebe-d54a59b42ba4"
      },
      "outputs": [
      {
                "output_type": "stream",
                "name": "stdout",
                "text": [
                  "['Hi', 'there', 'Sam!']\n"
                ]
              }
            ],
            "source": [
              "a=\"Hi there Sam!\"\n",
              "print(a.split())"
            ]
          },
          {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {
              "id": "RRGOKoai85j8",
              "outputId": "cc52f0d8-2ed1-4b4d-e956-5bbeb332cdc2"
            },
            "outputs": [
              {
                "data": {
                  "text/plain": [
                    "['Hi', 'there', 'dad!']"
                  ]
                },
                "execution_count": 3,
                "metadata": {
                  "tags": []
                },
                "output_type": "execute_result"
              }
            ],
            "source": []
          },
          {
            "cell_type": "markdown",
            "metadata": {
              "id": "_bBNOu-785j9"
            },
            "source": [
              "** Given the variables:**\n",
              "\n",
              "    planet = \"Earth\"\n",
              "    diameter = 12742\n",
              "\n",
              "** Use .format() to print the following string: **\n",
              "\n",
              "    The diameter of Earth is 12742 kilometers."
            ]
          },
          {
            "cell_type": "code",
            "execution_count": 8,
            "metadata": {
              "collapsed": true,
              "id": "2TrzmDcS85j-",
              "colab": {
                "base_uri": "https://localhost:8080/"
              },
              "outputId": "38041828-bdf8-4528-e5fd-39e910d150a7"
            },
            "outputs": [
              {
                "output_type": "stream",
                "name": "stdout",
                "text": [
                  "The diameter of Earth is 12742 kilometers.\n"
                ]
              }
            ],
             "source": [
                    "Planet=\"Earth\"\n",
                    "Diameter=12742\n",
                    "print(\"The diameter of \"+str(Planet), \"is\",Diameter,\"kilometers.\")"
                  ]
                },
                {
                  "cell_type": "code",
                  "execution_count": null,
                  "metadata": {
                    "id": "s_dQ7_xc85j_",
                    "outputId": "4235fdfb-5591-4dd9-f9d2-77f311977633"
                  },
                  "outputs": [
                    {
                      "name": "stdout",
                      "output_type": "stream",
                      "text": [
                        "The diameter of Earth is 12742 kilometers.\n"
                      ]
                    }
                  ],
                  "source": []
                },
                {
                  "cell_type": "markdown",
                  "metadata": {
                    "id": "QAKtN7Hh85kB"
                  },
                  "source": [
                    "** Given this nested list, use indexing to grab the word \"hello\" **"
                  ]
                },
                {
                  "cell_type": "code",
                  "execution_count": null,
                  "metadata": {
                    "collapsed": true,
                    "id": "-7dzQDyK85kD"
                  },
                  "outputs": [],
                  "source": [
                    "lst = [1,2,[3,4],[5,[100,200,['hello']],23,11],1,7]"
                  ]
                },
                {
                  "cell_type": "code",
                  "execution_count": 12,
                  "metadata": {
                    "id": "6m5C0sTW85kE",
                    "outputId": "0cb35c9a-8d2e-452f-f3c5-2d1547cb5a15",
                    "colab": {
                      "base_uri": "https://localhost:8080/"
                    }
                  },
                  "outputs": [
                    {
                      "output_type": "stream",
                      "name": "stdout",
                      "text": [
                        "['hello']\n"
                      ]
                    }
                  ],
                  "source": [
                    "lst = [1,2,[3,4],[5,[100,200,['hello']],23,11],1,7]\n",
                    "A=lst[3][1][2]\n",
                    "print(A)"
                  ]
                },
                {
                  "cell_type": "markdown",
                  "metadata": {
                    "id": "9Ma7M4a185kF"
                  },
                  "source": [
                    "** Given this nest dictionary grab the word \"hello\". Be prepared, this will be annoying/tricky **"
                  ]
                },
                {
                  "cell_type": "code",
                  "execution_count": null,
                  "metadata": {
                    "id": "vrYAxSYN85kG"
                  },
                  "outputs": [],
                  "source": [
                    "d = {'k1':[1,2,3,{'tricky':['oh','man','inception',{'target':[1,2,3,'hello']}]}]}"
                  ]
                },
                {
                  "cell_type": "code",
                  "execution_count": 13,
                  "metadata": {
                    "id": "FlILSdm485kH",
                    "outputId": "2b1a0607-c37e-4ae5-bec1-20051c8a4257",
                    "colab": {
                      "base_uri": "https://localhost:8080/"
                    }
                  },
                  "outputs": [
                    {
                      "output_type": "stream",
                      "name": "stdout",
                      "text": [
                        "hello\n"
                      ]
                    }
                  ],
                  "source": [
                    "d = {'k1':[1,2,3,{'tricky':['oh','man','inception',{'target':[1,2,3,'hello']}]}]}\n",
                    "print(d['k1'][3][\"tricky\"][3]['target'][3])\n"
                  ]
                },
                {
                  "cell_type": "markdown",
                  "metadata": {
                    "id": "FInV_FKB85kI"
                  },
                  "source": [
                    "** What is the main difference between a tuple and a list? **"
                  ]
                },
                {
                  "cell_type": "code",
                  "execution_count": 15,
                  "metadata": {
                    "collapsed": true,
                    "id": "_VBWf00q85kJ"
                  },
                  "outputs": [],
                  "source": [
                    "\n",
                    "#List are mutable but tuples are immutable.\n",
                    "#The items in lists are surrounded by square brackets, The items in tuples are surrounded by parentheses.\n",
                    "#The list is dynamic but tuple is static."
                  ]
                },
                {
                  "cell_type": "markdown",
                  "metadata": {
                    "id": "zP-j0HZj85kK"
                  },
                  "source": [
                    "** Create a function that grabs the email website domain from a string in the form: **\n",
                    "\n",
                    "    user@domain.com\n",
                    "    \n",
                    "**So for example, passing \"user@domain.com\" would return: domain.com**"
                  ]
                },
                {
                  "cell_type": "code",
                  "execution_count": 16,
                  "metadata": {
                    "collapsed": true,
                    "id": "unvEAwjk85kL"
                  },
                   "outputs": [],
                        "source": [
                          "def domainGet(email):\n",
                          "    return email.split('@')[-1]"
                        ]
                      },
                      {
                        "cell_type": "code",
                        "execution_count": 17,
                        "metadata": {
                          "id": "Gb9dspLC85kL",
                          "outputId": "dff7e73d-b382-4aa2-d183-459c4c9d80fa",
                          "colab": {
                            "base_uri": "https://localhost:8080/",
                            "height": 36
                          }
                        },
                        "outputs": [
                          {
                            "output_type": "execute_result",
                            "data": {
                              "text/plain": [
                                "'domain.com'"
                              ],
                              "application/vnd.google.colaboratory.intrinsic+json": {
                                "type": "string"
                              }
                            },
                            "metadata": {},
                            "execution_count": 17
                          }
                        ],
                        "source": [
                          "domainGet('user@domain.com')"
                        ]
                      },
                      {
                        "cell_type": "markdown",
                        "metadata": {
                          "id": "gYydb-y085kM"
                        },
                        "source": [
                          "** Create a basic function that returns True if the word 'dog' is contained in the input string. Don't worry about edge cases like a punctuation being attached to the word dog, but do account for capitalization. **"
                        ]
                      },
                      {
                        "cell_type": "code",
                        "execution_count": 18,
                        "metadata": {
                          "collapsed": true,
                          "id": "Q4ldLGV785kM",
                          "colab": {
                            "base_uri": "https://localhost:8080/"
                          },
                          "outputId": "94782f6b-19cf-47cb-e1a3-b242279d8401"
                        },
                        "outputs": [
                          {
                            "output_type": "stream",
                            "name": "stdout",
                            "text": [
                              "True\n"
                            ]
                          }
                        ],
                        "source": [
                          "def findDog(st):\n",
                          "    if 'dog' in st.lower():\n",
                          "        print(\"True\")\n",
                          "    else:\n",
                          "        print(\"False\")\n",
                          "\n",
                          "ab = \"Is there any dog here?\"\n",
                          "findDog(ab)"
                        ]
                      },
                      {
                        "cell_type": "code",
                        "execution_count": 19,
                        "metadata": {
                          "id": "EqH6b7yv85kN",
                          "outputId": "e0b882c8-e057-43a1-89ff-cb6c7c22ef55",
                          "colab": {
                            "base_uri": "https://localhost:8080/"
                          }
                        },
                        "outputs": [
                          {
                            "output_type": "stream",
                            "name": "stdout",
                            "text": [
                              "True\n"
                            ]
                          }
                        ],
                        "source": [
                          "findDog('Is there any dog here?')"
                        ]
                      },
                      {
                        "cell_type": "markdown",
                        "metadata": {
                          "id": "AyHQFALC85kO"
                        },
                        "source": [
                          "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **"
                        ]
                      },
                      {
                        "cell_type": "code",
                        "execution_count": 21,
                        "metadata": {
                          "id": "6hdc169585kO"
                        },
                        "outputs": [],
                        "source": [
                          "def countDog(ab):\n",
                          "    count = 0\n",
                          "    for word in ab.lower().split():\n",
                          "        if word == 'dog':\n",
                          "            count += 1\n",
                          "    return count"
                        ]
                      },
                      {
                        "cell_type": "code",
                        "execution_count": 29,
                        "metadata": {
                          "id": "igzsvHb385kO",
                          "outputId": "fe88369f-c75b-410d-a674-5a75765c4e90",
                          "colab": {
                            "base_uri": "https://localhost:8080/"
                          }
                        },
                        "outputs": [
                          {
                            "output_type": "execute_result",
                            "data": {
                              "text/plain": [
                                "4"
                              ]
                            },
                            "metadata": {},
                            "execution_count": 29
                          }
                        ],
                        "source": [
                          "countDog('My dog dog  will be friendly with our neighbours dog dog  as well as street dog!')"
                        ]
                      },
                      {
                        "cell_type": "markdown",
                        "metadata": {
                          "id": "3n7jJt4k85kP"
                        },
                        "source": [
                          "### Problem\n",
                          "**You are driving a little too fast, and a police officer stops you. Write a function\n",
                          "  to return one of 3 possible results: \"No ticket\", \"Small ticket\", or \"Big Ticket\". \n",
                          "  If your speed is 60 or less, the result is \"No Ticket\". If speed is between 61 \n",
                          "  and 80 inclusive, the result is \"Small Ticket\". If speed is 81 or more, the result is \"Big    Ticket\". Unless it is your birthday (encoded as a boolean value in the parameters of the function) -- on your birthday, your speed can be 5 higher in all \n",
                          "  cases. **"
                        ]
                      },
                      {
                        "cell_type": "code",
                        "execution_count": 34,
                        "metadata": {
                          "collapsed": true,
                          "id": "nvXMkvWk85kQ"
                        },
                        "outputs": [],
                        "source": [
                          "def caught_speeding(speed, is_birthday):\n",
                          "    \n",
                          "    if is_birthday:\n",
                          "        speeding = speed - 5\n",
                          "    else:\n",
                          "        speeding = speed\n",
                          "    \n",
                          "    if speeding > 80:\n",
                          "        return 'Big Ticket'\n",
                          "    elif speeding > 60:\n",
                          "        return 'Small Ticket'\n",
                          "    else:\n",
                          "        return 'No Ticket'"
                        ]
                      },
                      {
                        "cell_type": "code",
                        "execution_count": 36,
                        "metadata": {
                          "id": "BU_UZcyk85kS",
                          "outputId": "bcca6679-dc08-4e09-f4a5-8291fa5471c8",
                          "colab": {
                            "base_uri": "https://localhost:8080/",
                            "height": 36
                          }
                        },
                        "outputs": [
                          {
                            "output_type": "execute_result",
                            "data": {
                              "text/plain": [
                                "'Big Ticket'"
                              ],
                              "application/vnd.google.colaboratory.intrinsic+json": {
                                "type": "string"
                              }
                            },
                            "metadata": {},
                            "execution_count": 36
                          }
                        ],
                        "source": [
                          "caught_speeding(85,False)\n"
                        ]
                      },
                      {
                        "cell_type": "code",
                        "execution_count": 37,
                        "metadata": {
                          "id": "p1AGJ7DM85kR",
                          "outputId": "6ff3ebaf-1fe6-48a8-9f8f-751d9cce8f3c",
                          "colab": {
                            "base_uri": "https://localhost:8080/",
                            "height": 36
                          }
                        },
                        "outputs": [
                          {
                            "output_type": "execute_result",
                            "data": {
                              "text/plain": [
                                "'Small Ticket'"
                              ],
                              "application/vnd.google.colaboratory.intrinsic+json": {
                                "type": "string"
                              }
                            },
                            "metadata": {},
                            "execution_count": 37
                          }
                        ],
                        "source": [
                          "caught_speeding(85,True)"
                        ]
                      },
                      {
                        "cell_type": "markdown",
                        "source": [
                          "Create an employee list with basic salary values(at least 5 values for 5 employees)  and using a for loop retreive each employee salary and calculate total salary expenditure. "
                        ],
                        "metadata": {
                          "id": "Tie4rC7_kAOC"
                        }
                      },
                      {
                        "cell_type": "code",
                        "source": [
                          "employees = [\"Kavin\", \"Rahul\", \"Tarun\", \"Shree\", \"Adithi\", \"Vandana\"]    \n",
                          "salary={}\n",
                          "for emp in employees:\n",
                          "    try:\n",
                          "       amount=int(input(f'Enter salary for {emp}: '))\n",
                          "       salary[emp]=amount\n",
                          "    except ValueError:\n",
                          "       print(f'Wrong salary input for {emp} ')\n",
                          "print(salary)\n",
                          "print('Total Salary Expenditure ',sum(salary.values()))"
                        ],
                        "metadata": {
                          "id": "R5-CdXSKjacN",
                          "colab": {
                            "base_uri": "https://localhost:8080/"
                          },
                          "outputId": "6534ccba-3972-4994-ec04-c42bedc9290d"
                        },
                        "execution_count": 39,
                        "outputs": [
                          {
                            "output_type": "stream",
                            "name": "stdout",
                            "text": [
                              "Enter salary for Kavin: 10000000\n",
                              "Enter salary for Rahul: 2300000\n",
                              "Enter salary for Tarun: 12000\n",
                              "Enter salary for Shree: 20000000\n",
                              "Enter salary for Adithi: 140000\n",
                              "Enter salary for Vandana: 12000\n",
                              "{'Kavin': 10000000, 'Rahul': 2300000, 'Tarun': 12000, 'Shree': 20000000, 'Adithi': 140000, 'Vandana': 12000}\n",
                              "Total Salary Expenditure  32464000\n"
                            ]
                          }
                        ]
                      },
                      {
                        "cell_type": "markdown",
                        "source": [
                          "Create two dictionaries in Python:\n",
                          "\n",
                          "First one to contain fields as Empid,  Empname,  Basicpay\n",
                          "\n",
                          "Second dictionary to contain fields as DeptName,  DeptId.\n",
                          "\n",
                          "Combine both dictionaries. "
                        ],
                        "metadata": {
                          "id": "-L1aiFqRkF5s"
                        }
                      },
                      {
                        "cell_type": "code",
                        "source": [
                          "dict1 = {'Empid': 110, 'empname': 'Rohan', 'Basicpay' : 10000000 }\n",
                          "dict2 = {'DeptName': 'Business analyst','DeptId': 230, }\n",
                          "\n",
                          "dict3 = {**dict1,**dict2}\n",
                          "print (dict3)"
                        ],
                        "metadata": {
                          "id": "8ugVoEe0kOsk",
                          "colab": {
                            "base_uri": "https://localhost:8080/"
                          },
                          "outputId": "5f320af5-2948-4ed4-bcaf-fc4ea06609e6"
                        },
                        "execution_count": 43,
                        "outputs": [
                          {
                            "output_type": "stream",
                            "name": "stdout",
                            "text": [
                              "{'Empid': 110, 'empname': 'Rohan', 'Basicpay': 10000000, 'DeptName': 'Business analyst', 'DeptId': 230}\n"
                            ]
                          }
                        ]
                      }
                    ],
                    "metadata": {
                      "colab": {
                        "provenance": []
                      },
                      "kernelspec": {
                        "display_name": "Python 3",
                        "language": "python",
                        "name": "python3"
                      },
                      "language_info": {
                        "codemirror_mode": {
                          "name": "ipython",
                          "version": 3
                        },
                        "file_extension": ".py",
                        "mimetype": "text/x-python",
                        "name": "python",
                        "nbconvert_exporter": "python",
                        "pygments_lexer": "ipython3",
                        "version": "3.8.5"
                      }
                    },
                    "nbformat": 4,
                    "nbformat_minor": 0
                  }